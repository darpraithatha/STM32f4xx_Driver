
stm32f4xx_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cd0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e94  08000e94  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e94  08000e94  00020418  2**0
                  CONTENTS
  4 .ARM          00000000  08000e94  08000e94  00020418  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e94  08000e94  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e94  08000e94  00010e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e98  08000e98  00010e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000418  20000000  08000e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000418  080012b4  00020418  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  080012b4  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020418  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002172  00000000  00000000  00020448  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000694  00000000  00000000  000225ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000180  00000000  00000000  00022c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000138  00000000  00000000  00022dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002462  00000000  00000000  00022f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000019fd  00000000  00000000  0002536a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a235  00000000  00000000  00026d67  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00030f9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000504  00000000  00000000  00031018  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000418 	.word	0x20000418
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000e7c 	.word	0x08000e7c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000041c 	.word	0x2000041c
 8000200:	08000e7c 	.word	0x08000e7c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <delay>:

USART_Handle_t usart2_handle;

char msg[1024] = "USART Tx Testing.....\n\r";

void delay (void){
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0

	for (uint32_t i = 0; i < 500000/2 ; i++);
 800021a:	2300      	movs	r3, #0
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	e002      	b.n	8000226 <delay+0x12>
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3301      	adds	r3, #1
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a04      	ldr	r2, [pc, #16]	; (800023c <delay+0x28>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d9f8      	bls.n	8000220 <delay+0xc>
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	0003d08f 	.word	0x0003d08f

08000240 <USART2_Init>:


void USART2_Init(void){
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0

	usart2_handle.pUSARTx = USART2;
 8000244:	4b0d      	ldr	r3, [pc, #52]	; (800027c <USART2_Init+0x3c>)
 8000246:	4a0e      	ldr	r2, [pc, #56]	; (8000280 <USART2_Init+0x40>)
 8000248:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 800024a:	4b0c      	ldr	r3, [pc, #48]	; (800027c <USART2_Init+0x3c>)
 800024c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000250:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000252:	4b0a      	ldr	r3, [pc, #40]	; (800027c <USART2_Init+0x3c>)
 8000254:	2200      	movs	r2, #0
 8000256:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TX;
 8000258:	4b08      	ldr	r3, [pc, #32]	; (800027c <USART2_Init+0x3c>)
 800025a:	2200      	movs	r2, #0
 800025c:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 800025e:	4b07      	ldr	r3, [pc, #28]	; (800027c <USART2_Init+0x3c>)
 8000260:	2200      	movs	r2, #0
 8000262:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <USART2_Init+0x3c>)
 8000266:	2200      	movs	r2, #0
 8000268:	739a      	strb	r2, [r3, #14]
	usart2_handle.USART_Config.USART_wordLength = USART_WORDLEN_8BITS;
 800026a:	4b04      	ldr	r3, [pc, #16]	; (800027c <USART2_Init+0x3c>)
 800026c:	2200      	movs	r2, #0
 800026e:	735a      	strb	r2, [r3, #13]
	USART_Config(&usart2_handle);
 8000270:	4802      	ldr	r0, [pc, #8]	; (800027c <USART2_Init+0x3c>)
 8000272:	f000 fce3 	bl	8000c3c <USART_Config>

}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	20000434 	.word	0x20000434
 8000280:	40004400 	.word	0x40004400

08000284 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void){
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0

	GPIO_Handle_t GPIOBtn;

	//GPIOBtn Configuration
	GPIOBtn.pGPIOx = GPIOC;
 800028a:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <GPIO_ButtonInit+0x2c>)
 800028c:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800028e:	230d      	movs	r3, #13
 8000290:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000292:	2300      	movs	r3, #0
 8000294:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000296:	2302      	movs	r3, #2
 8000298:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PP_NO_PUPD;
 800029a:	2300      	movs	r3, #0
 800029c:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 f94b 	bl	800053c <GPIO_Init>
}
 80002a6:	bf00      	nop
 80002a8:	3710      	adds	r7, #16
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40020800 	.word	0x40020800

080002b4 <USART2_GPIOInit>:



void USART2_GPIOInit(void){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0

	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <USART2_GPIOInit+0x40>)
 80002bc:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002be:	2302      	movs	r3, #2
 80002c0:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002c2:	2300      	movs	r3, #0
 80002c4:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PP_PU;
 80002c6:	2301      	movs	r3, #1
 80002c8:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002ca:	2302      	movs	r3, #2
 80002cc:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 80002ce:	2307      	movs	r3, #7
 80002d0:	737b      	strb	r3, [r7, #13]

	// USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 80002d2:	2302      	movs	r3, #2
 80002d4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 f92f 	bl	800053c <GPIO_Init>

	// USART RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 80002de:	2303      	movs	r3, #3
 80002e0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 f929 	bl	800053c <GPIO_Init>

}
 80002ea:	bf00      	nop
 80002ec:	3710      	adds	r7, #16
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40020000 	.word	0x40020000

080002f8 <main>:



int main(void){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0

	// Initializing the GPIO Pins in AltFun Mode
	USART2_GPIOInit();
 80002fc:	f7ff ffda 	bl	80002b4 <USART2_GPIOInit>

	// Initializing the GPIO Pins
	GPIO_ButtonInit();
 8000300:	f7ff ffc0 	bl	8000284 <GPIO_ButtonInit>

	// Initializing the USART2
	USART2_Init();
 8000304:	f7ff ff9c 	bl	8000240 <USART2_Init>

	// Enable USART Peripheral
	USART_PeripheralControl(USART2, ENABLE);
 8000308:	2101      	movs	r1, #1
 800030a:	480b      	ldr	r0, [pc, #44]	; (8000338 <main+0x40>)
 800030c:	f000 fd62 	bl	8000dd4 <USART_PeripheralControl>

	while (1){
		while( GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) );
 8000310:	bf00      	nop
 8000312:	210d      	movs	r1, #13
 8000314:	4809      	ldr	r0, [pc, #36]	; (800033c <main+0x44>)
 8000316:	f000 faad 	bl	8000874 <GPIO_ReadFromInputPin>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d1f8      	bne.n	8000312 <main+0x1a>
		// Debouncing
		delay();
 8000320:	f7ff ff78 	bl	8000214 <delay>
		USART_SendData(&usart2_handle, (uint8_t*)msg, strlen(msg));
 8000324:	4806      	ldr	r0, [pc, #24]	; (8000340 <main+0x48>)
 8000326:	f7ff ff6d 	bl	8000204 <strlen>
 800032a:	4603      	mov	r3, r0
 800032c:	461a      	mov	r2, r3
 800032e:	4904      	ldr	r1, [pc, #16]	; (8000340 <main+0x48>)
 8000330:	4804      	ldr	r0, [pc, #16]	; (8000344 <main+0x4c>)
 8000332:	f000 fd02 	bl	8000d3a <USART_SendData>
		while( GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) );
 8000336:	e7eb      	b.n	8000310 <main+0x18>
 8000338:	40004400 	.word	0x40004400
 800033c:	40020800 	.word	0x40020800
 8000340:	20000000 	.word	0x20000000
 8000344:	20000434 	.word	0x20000434

08000348 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000348:	480d      	ldr	r0, [pc, #52]	; (8000380 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800034c:	480d      	ldr	r0, [pc, #52]	; (8000384 <LoopForever+0x6>)
  ldr r1, =_edata
 800034e:	490e      	ldr	r1, [pc, #56]	; (8000388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000350:	4a0e      	ldr	r2, [pc, #56]	; (800038c <LoopForever+0xe>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000354:	e002      	b.n	800035c <LoopCopyDataInit>

08000356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035a:	3304      	adds	r3, #4

0800035c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800035c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000360:	d3f9      	bcc.n	8000356 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000362:	4a0b      	ldr	r2, [pc, #44]	; (8000390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000364:	4c0b      	ldr	r4, [pc, #44]	; (8000394 <LoopForever+0x16>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000368:	e001      	b.n	800036e <LoopFillZerobss>

0800036a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800036c:	3204      	adds	r2, #4

0800036e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000370:	d3fb      	bcc.n	800036a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000372:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000376:	f000 fd5d 	bl	8000e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037a:	f7ff ffbd 	bl	80002f8 <main>

0800037e <LoopForever>:

LoopForever:
    b LoopForever
 800037e:	e7fe      	b.n	800037e <LoopForever>
  ldr   r0, =_estack
 8000380:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000388:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 800038c:	08000e9c 	.word	0x08000e9c
  ldr r2, =_sbss
 8000390:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 8000394:	20000458 	.word	0x20000458

08000398 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000398:	e7fe      	b.n	8000398 <ADC_IRQHandler>
	...

0800039c <GPIO_PeriClockControl>:
 * @Note			- none
 *
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	460b      	mov	r3, r1
 80003a6:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 80003a8:	78fb      	ldrb	r3, [r7, #3]
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d157      	bne.n	800045e <GPIO_PeriClockControl+0xc2>
	{
		if (pGPIOx == GPIOA){
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a59      	ldr	r2, [pc, #356]	; (8000518 <GPIO_PeriClockControl+0x17c>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d106      	bne.n	80003c4 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80003b6:	4b59      	ldr	r3, [pc, #356]	; (800051c <GPIO_PeriClockControl+0x180>)
 80003b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ba:	4a58      	ldr	r2, [pc, #352]	; (800051c <GPIO_PeriClockControl+0x180>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if (pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 80003c2:	e0a3      	b.n	800050c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB){
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a56      	ldr	r2, [pc, #344]	; (8000520 <GPIO_PeriClockControl+0x184>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d106      	bne.n	80003da <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003cc:	4b53      	ldr	r3, [pc, #332]	; (800051c <GPIO_PeriClockControl+0x180>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d0:	4a52      	ldr	r2, [pc, #328]	; (800051c <GPIO_PeriClockControl+0x180>)
 80003d2:	f043 0302 	orr.w	r3, r3, #2
 80003d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d8:	e098      	b.n	800050c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC){
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a51      	ldr	r2, [pc, #324]	; (8000524 <GPIO_PeriClockControl+0x188>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d106      	bne.n	80003f0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003e2:	4b4e      	ldr	r3, [pc, #312]	; (800051c <GPIO_PeriClockControl+0x180>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e6:	4a4d      	ldr	r2, [pc, #308]	; (800051c <GPIO_PeriClockControl+0x180>)
 80003e8:	f043 0304 	orr.w	r3, r3, #4
 80003ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ee:	e08d      	b.n	800050c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD){
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a4d      	ldr	r2, [pc, #308]	; (8000528 <GPIO_PeriClockControl+0x18c>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d106      	bne.n	8000406 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003f8:	4b48      	ldr	r3, [pc, #288]	; (800051c <GPIO_PeriClockControl+0x180>)
 80003fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fc:	4a47      	ldr	r2, [pc, #284]	; (800051c <GPIO_PeriClockControl+0x180>)
 80003fe:	f043 0308 	orr.w	r3, r3, #8
 8000402:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000404:	e082      	b.n	800050c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE){
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a48      	ldr	r2, [pc, #288]	; (800052c <GPIO_PeriClockControl+0x190>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d106      	bne.n	800041c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800040e:	4b43      	ldr	r3, [pc, #268]	; (800051c <GPIO_PeriClockControl+0x180>)
 8000410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000412:	4a42      	ldr	r2, [pc, #264]	; (800051c <GPIO_PeriClockControl+0x180>)
 8000414:	f043 0310 	orr.w	r3, r3, #16
 8000418:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041a:	e077      	b.n	800050c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF){
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a44      	ldr	r2, [pc, #272]	; (8000530 <GPIO_PeriClockControl+0x194>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d106      	bne.n	8000432 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000424:	4b3d      	ldr	r3, [pc, #244]	; (800051c <GPIO_PeriClockControl+0x180>)
 8000426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000428:	4a3c      	ldr	r2, [pc, #240]	; (800051c <GPIO_PeriClockControl+0x180>)
 800042a:	f043 0320 	orr.w	r3, r3, #32
 800042e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000430:	e06c      	b.n	800050c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG){
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a3f      	ldr	r2, [pc, #252]	; (8000534 <GPIO_PeriClockControl+0x198>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d106      	bne.n	8000448 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800043a:	4b38      	ldr	r3, [pc, #224]	; (800051c <GPIO_PeriClockControl+0x180>)
 800043c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043e:	4a37      	ldr	r2, [pc, #220]	; (800051c <GPIO_PeriClockControl+0x180>)
 8000440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000444:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000446:	e061      	b.n	800050c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH){
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a3b      	ldr	r2, [pc, #236]	; (8000538 <GPIO_PeriClockControl+0x19c>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d15d      	bne.n	800050c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000450:	4b32      	ldr	r3, [pc, #200]	; (800051c <GPIO_PeriClockControl+0x180>)
 8000452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000454:	4a31      	ldr	r2, [pc, #196]	; (800051c <GPIO_PeriClockControl+0x180>)
 8000456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800045a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045c:	e056      	b.n	800050c <GPIO_PeriClockControl+0x170>
		if (pGPIOx == GPIOA){
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a2d      	ldr	r2, [pc, #180]	; (8000518 <GPIO_PeriClockControl+0x17c>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d106      	bne.n	8000474 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 8000466:	4b2d      	ldr	r3, [pc, #180]	; (800051c <GPIO_PeriClockControl+0x180>)
 8000468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046a:	4a2c      	ldr	r2, [pc, #176]	; (800051c <GPIO_PeriClockControl+0x180>)
 800046c:	f023 0301 	bic.w	r3, r3, #1
 8000470:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000472:	e04b      	b.n	800050c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB){
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a2a      	ldr	r2, [pc, #168]	; (8000520 <GPIO_PeriClockControl+0x184>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d106      	bne.n	800048a <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 800047c:	4b27      	ldr	r3, [pc, #156]	; (800051c <GPIO_PeriClockControl+0x180>)
 800047e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000480:	4a26      	ldr	r2, [pc, #152]	; (800051c <GPIO_PeriClockControl+0x180>)
 8000482:	f023 0302 	bic.w	r3, r3, #2
 8000486:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000488:	e040      	b.n	800050c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC){
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a25      	ldr	r2, [pc, #148]	; (8000524 <GPIO_PeriClockControl+0x188>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d106      	bne.n	80004a0 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8000492:	4b22      	ldr	r3, [pc, #136]	; (800051c <GPIO_PeriClockControl+0x180>)
 8000494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000496:	4a21      	ldr	r2, [pc, #132]	; (800051c <GPIO_PeriClockControl+0x180>)
 8000498:	f023 0304 	bic.w	r3, r3, #4
 800049c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049e:	e035      	b.n	800050c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD){
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4a21      	ldr	r2, [pc, #132]	; (8000528 <GPIO_PeriClockControl+0x18c>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d106      	bne.n	80004b6 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80004a8:	4b1c      	ldr	r3, [pc, #112]	; (800051c <GPIO_PeriClockControl+0x180>)
 80004aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ac:	4a1b      	ldr	r2, [pc, #108]	; (800051c <GPIO_PeriClockControl+0x180>)
 80004ae:	f023 0308 	bic.w	r3, r3, #8
 80004b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b4:	e02a      	b.n	800050c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE){
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4a1c      	ldr	r2, [pc, #112]	; (800052c <GPIO_PeriClockControl+0x190>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d106      	bne.n	80004cc <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80004be:	4b17      	ldr	r3, [pc, #92]	; (800051c <GPIO_PeriClockControl+0x180>)
 80004c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c2:	4a16      	ldr	r2, [pc, #88]	; (800051c <GPIO_PeriClockControl+0x180>)
 80004c4:	f023 0310 	bic.w	r3, r3, #16
 80004c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ca:	e01f      	b.n	800050c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF){
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a18      	ldr	r2, [pc, #96]	; (8000530 <GPIO_PeriClockControl+0x194>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d106      	bne.n	80004e2 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 80004d4:	4b11      	ldr	r3, [pc, #68]	; (800051c <GPIO_PeriClockControl+0x180>)
 80004d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d8:	4a10      	ldr	r2, [pc, #64]	; (800051c <GPIO_PeriClockControl+0x180>)
 80004da:	f023 0320 	bic.w	r3, r3, #32
 80004de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e0:	e014      	b.n	800050c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG){
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <GPIO_PeriClockControl+0x198>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d106      	bne.n	80004f8 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <GPIO_PeriClockControl+0x180>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a0b      	ldr	r2, [pc, #44]	; (800051c <GPIO_PeriClockControl+0x180>)
 80004f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f6:	e009      	b.n	800050c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH){
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4a0f      	ldr	r2, [pc, #60]	; (8000538 <GPIO_PeriClockControl+0x19c>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d105      	bne.n	800050c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <GPIO_PeriClockControl+0x180>)
 8000502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000504:	4a05      	ldr	r2, [pc, #20]	; (800051c <GPIO_PeriClockControl+0x180>)
 8000506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800050a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	40020000 	.word	0x40020000
 800051c:	40023800 	.word	0x40023800
 8000520:	40020400 	.word	0x40020400
 8000524:	40020800 	.word	0x40020800
 8000528:	40020c00 	.word	0x40020c00
 800052c:	40021000 	.word	0x40021000
 8000530:	40021400 	.word	0x40021400
 8000534:	40021800 	.word	0x40021800
 8000538:	40021c00 	.word	0x40021c00

0800053c <GPIO_Init>:
 * @Note			- none
 *
 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]

	// Enable Clock for the GPIO Peripheral
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2101      	movs	r1, #1
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff ff24 	bl	800039c <GPIO_PeriClockControl>


	//1.Configure the Mode of GPIO Pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	795b      	ldrb	r3, [r3, #5]
 8000558:	2b03      	cmp	r3, #3
 800055a:	d81f      	bhi.n	800059c <GPIO_Init+0x60>

		//Non-Interrupt Mode
		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	795b      	ldrb	r3, [r3, #5]
 8000560:	461a      	mov	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	791b      	ldrb	r3, [r3, #4]
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	fa02 f303 	lsl.w	r3, r2, r3
 800056c:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clear
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	791b      	ldrb	r3, [r3, #4]
 8000578:	4619      	mov	r1, r3
 800057a:	2303      	movs	r3, #3
 800057c:	408b      	lsls	r3, r1
 800057e:	43db      	mvns	r3, r3
 8000580:	4619      	mov	r1, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	400a      	ands	r2, r1
 8000588:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // Set
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	6819      	ldr	r1, [r3, #0]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	68fa      	ldr	r2, [r7, #12]
 8000596:	430a      	orrs	r2, r1
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	e0c9      	b.n	8000730 <GPIO_Init+0x1f4>
	}

	else{
		//Interrupt Mode
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	795b      	ldrb	r3, [r3, #5]
 80005a0:	2b04      	cmp	r3, #4
 80005a2:	d117      	bne.n	80005d4 <GPIO_Init+0x98>
			//1. Configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005a4:	4b4c      	ldr	r3, [pc, #304]	; (80006d8 <GPIO_Init+0x19c>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	7912      	ldrb	r2, [r2, #4]
 80005ac:	4611      	mov	r1, r2
 80005ae:	2201      	movs	r2, #1
 80005b0:	408a      	lsls	r2, r1
 80005b2:	4611      	mov	r1, r2
 80005b4:	4a48      	ldr	r2, [pc, #288]	; (80006d8 <GPIO_Init+0x19c>)
 80005b6:	430b      	orrs	r3, r1
 80005b8:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR Bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005ba:	4b47      	ldr	r3, [pc, #284]	; (80006d8 <GPIO_Init+0x19c>)
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	7912      	ldrb	r2, [r2, #4]
 80005c2:	4611      	mov	r1, r2
 80005c4:	2201      	movs	r2, #1
 80005c6:	408a      	lsls	r2, r1
 80005c8:	43d2      	mvns	r2, r2
 80005ca:	4611      	mov	r1, r2
 80005cc:	4a42      	ldr	r2, [pc, #264]	; (80006d8 <GPIO_Init+0x19c>)
 80005ce:	400b      	ands	r3, r1
 80005d0:	6093      	str	r3, [r2, #8]
 80005d2:	e035      	b.n	8000640 <GPIO_Init+0x104>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	795b      	ldrb	r3, [r3, #5]
 80005d8:	2b05      	cmp	r3, #5
 80005da:	d117      	bne.n	800060c <GPIO_Init+0xd0>
			//2. Configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005dc:	4b3e      	ldr	r3, [pc, #248]	; (80006d8 <GPIO_Init+0x19c>)
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	7912      	ldrb	r2, [r2, #4]
 80005e4:	4611      	mov	r1, r2
 80005e6:	2201      	movs	r2, #1
 80005e8:	408a      	lsls	r2, r1
 80005ea:	4611      	mov	r1, r2
 80005ec:	4a3a      	ldr	r2, [pc, #232]	; (80006d8 <GPIO_Init+0x19c>)
 80005ee:	430b      	orrs	r3, r1
 80005f0:	6093      	str	r3, [r2, #8]
			//Clear the corresponding FTSR Bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005f2:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <GPIO_Init+0x19c>)
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	7912      	ldrb	r2, [r2, #4]
 80005fa:	4611      	mov	r1, r2
 80005fc:	2201      	movs	r2, #1
 80005fe:	408a      	lsls	r2, r1
 8000600:	43d2      	mvns	r2, r2
 8000602:	4611      	mov	r1, r2
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <GPIO_Init+0x19c>)
 8000606:	400b      	ands	r3, r1
 8000608:	60d3      	str	r3, [r2, #12]
 800060a:	e019      	b.n	8000640 <GPIO_Init+0x104>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	795b      	ldrb	r3, [r3, #5]
 8000610:	2b06      	cmp	r3, #6
 8000612:	d115      	bne.n	8000640 <GPIO_Init+0x104>
			//3. Configure FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000614:	4b30      	ldr	r3, [pc, #192]	; (80006d8 <GPIO_Init+0x19c>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	7912      	ldrb	r2, [r2, #4]
 800061c:	4611      	mov	r1, r2
 800061e:	2201      	movs	r2, #1
 8000620:	408a      	lsls	r2, r1
 8000622:	4611      	mov	r1, r2
 8000624:	4a2c      	ldr	r2, [pc, #176]	; (80006d8 <GPIO_Init+0x19c>)
 8000626:	430b      	orrs	r3, r1
 8000628:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <GPIO_Init+0x19c>)
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	7912      	ldrb	r2, [r2, #4]
 8000632:	4611      	mov	r1, r2
 8000634:	2201      	movs	r2, #1
 8000636:	408a      	lsls	r2, r1
 8000638:	4611      	mov	r1, r2
 800063a:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <GPIO_Init+0x19c>)
 800063c:	430b      	orrs	r3, r1
 800063e:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO PORT Selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	089b      	lsrs	r3, r3, #2
 8000646:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4 ;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	791b      	ldrb	r3, [r3, #4]
 800064c:	f003 0303 	and.w	r3, r3, #3
 8000650:	72bb      	strb	r3, [r7, #10]
		SYSCFG_PCLK_EN();
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <GPIO_Init+0x1a0>)
 8000654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000656:	4a21      	ldr	r2, [pc, #132]	; (80006dc <GPIO_Init+0x1a0>)
 8000658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065c:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= ( ( GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx) ) << (temp2 * 4));
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <GPIO_Init+0x1a4>)
 8000660:	7afb      	ldrb	r3, [r7, #11]
 8000662:	3302      	adds	r3, #2
 8000664:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	491d      	ldr	r1, [pc, #116]	; (80006e4 <GPIO_Init+0x1a8>)
 800066e:	428b      	cmp	r3, r1
 8000670:	d048      	beq.n	8000704 <GPIO_Init+0x1c8>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	491c      	ldr	r1, [pc, #112]	; (80006e8 <GPIO_Init+0x1ac>)
 8000678:	428b      	cmp	r3, r1
 800067a:	d02b      	beq.n	80006d4 <GPIO_Init+0x198>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	491a      	ldr	r1, [pc, #104]	; (80006ec <GPIO_Init+0x1b0>)
 8000682:	428b      	cmp	r3, r1
 8000684:	d024      	beq.n	80006d0 <GPIO_Init+0x194>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4919      	ldr	r1, [pc, #100]	; (80006f0 <GPIO_Init+0x1b4>)
 800068c:	428b      	cmp	r3, r1
 800068e:	d01d      	beq.n	80006cc <GPIO_Init+0x190>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4917      	ldr	r1, [pc, #92]	; (80006f4 <GPIO_Init+0x1b8>)
 8000696:	428b      	cmp	r3, r1
 8000698:	d016      	beq.n	80006c8 <GPIO_Init+0x18c>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4916      	ldr	r1, [pc, #88]	; (80006f8 <GPIO_Init+0x1bc>)
 80006a0:	428b      	cmp	r3, r1
 80006a2:	d00f      	beq.n	80006c4 <GPIO_Init+0x188>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4914      	ldr	r1, [pc, #80]	; (80006fc <GPIO_Init+0x1c0>)
 80006aa:	428b      	cmp	r3, r1
 80006ac:	d008      	beq.n	80006c0 <GPIO_Init+0x184>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4913      	ldr	r1, [pc, #76]	; (8000700 <GPIO_Init+0x1c4>)
 80006b4:	428b      	cmp	r3, r1
 80006b6:	d101      	bne.n	80006bc <GPIO_Init+0x180>
 80006b8:	2307      	movs	r3, #7
 80006ba:	e024      	b.n	8000706 <GPIO_Init+0x1ca>
 80006bc:	2300      	movs	r3, #0
 80006be:	e022      	b.n	8000706 <GPIO_Init+0x1ca>
 80006c0:	2306      	movs	r3, #6
 80006c2:	e020      	b.n	8000706 <GPIO_Init+0x1ca>
 80006c4:	2305      	movs	r3, #5
 80006c6:	e01e      	b.n	8000706 <GPIO_Init+0x1ca>
 80006c8:	2304      	movs	r3, #4
 80006ca:	e01c      	b.n	8000706 <GPIO_Init+0x1ca>
 80006cc:	2303      	movs	r3, #3
 80006ce:	e01a      	b.n	8000706 <GPIO_Init+0x1ca>
 80006d0:	2302      	movs	r3, #2
 80006d2:	e018      	b.n	8000706 <GPIO_Init+0x1ca>
 80006d4:	2301      	movs	r3, #1
 80006d6:	e016      	b.n	8000706 <GPIO_Init+0x1ca>
 80006d8:	40013c00 	.word	0x40013c00
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40013800 	.word	0x40013800
 80006e4:	40020000 	.word	0x40020000
 80006e8:	40020400 	.word	0x40020400
 80006ec:	40020800 	.word	0x40020800
 80006f0:	40020c00 	.word	0x40020c00
 80006f4:	40021000 	.word	0x40021000
 80006f8:	40021400 	.word	0x40021400
 80006fc:	40021800 	.word	0x40021800
 8000700:	40021c00 	.word	0x40021c00
 8000704:	2300      	movs	r3, #0
 8000706:	7ab9      	ldrb	r1, [r7, #10]
 8000708:	0089      	lsls	r1, r1, #2
 800070a:	408b      	lsls	r3, r1
 800070c:	4618      	mov	r0, r3
 800070e:	4957      	ldr	r1, [pc, #348]	; (800086c <GPIO_Init+0x330>)
 8000710:	7afb      	ldrb	r3, [r7, #11]
 8000712:	4302      	orrs	r2, r0
 8000714:	3302      	adds	r3, #2
 8000716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3. Enable the EXTI Interrupt Delivery using IMR
		EXTI->IMR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800071a:	4b55      	ldr	r3, [pc, #340]	; (8000870 <GPIO_Init+0x334>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	7912      	ldrb	r2, [r2, #4]
 8000722:	4611      	mov	r1, r2
 8000724:	2201      	movs	r2, #1
 8000726:	408a      	lsls	r2, r1
 8000728:	4611      	mov	r1, r2
 800072a:	4a51      	ldr	r2, [pc, #324]	; (8000870 <GPIO_Init+0x334>)
 800072c:	430b      	orrs	r3, r1
 800072e:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]

	//2. Configure the Speed
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	799b      	ldrb	r3, [r3, #6]
 8000738:	461a      	mov	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	791b      	ldrb	r3, [r3, #4]
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	fa02 f303 	lsl.w	r3, r2, r3
 8000744:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clear
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	689a      	ldr	r2, [r3, #8]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	791b      	ldrb	r3, [r3, #4]
 8000750:	4619      	mov	r1, r3
 8000752:	2303      	movs	r3, #3
 8000754:	408b      	lsls	r3, r1
 8000756:	43db      	mvns	r3, r3
 8000758:	4619      	mov	r1, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	400a      	ands	r2, r1
 8000760:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp; // Set
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	6899      	ldr	r1, [r3, #8]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	68fa      	ldr	r2, [r7, #12]
 800076e:	430a      	orrs	r2, r1
 8000770:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]

	//3. Configure the Pull-up/Pull-down Settings

	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	79db      	ldrb	r3, [r3, #7]
 800077a:	461a      	mov	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	791b      	ldrb	r3, [r3, #4]
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	fa02 f303 	lsl.w	r3, r2, r3
 8000786:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Clear
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	68da      	ldr	r2, [r3, #12]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	791b      	ldrb	r3, [r3, #4]
 8000792:	4619      	mov	r1, r3
 8000794:	2303      	movs	r3, #3
 8000796:	408b      	lsls	r3, r1
 8000798:	43db      	mvns	r3, r3
 800079a:	4619      	mov	r1, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	400a      	ands	r2, r1
 80007a2:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; // Set
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	68d9      	ldr	r1, [r3, #12]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	68fa      	ldr	r2, [r7, #12]
 80007b0:	430a      	orrs	r2, r1
 80007b2:	60da      	str	r2, [r3, #12]

	temp = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]

	//4. Configure the Output Type

	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType) );
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7a1b      	ldrb	r3, [r3, #8]
 80007bc:	461a      	mov	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	7a1b      	ldrb	r3, [r3, #8]
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ); // Clear
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	685a      	ldr	r2, [r3, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	791b      	ldrb	r3, [r3, #4]
 80007d2:	4619      	mov	r1, r3
 80007d4:	2301      	movs	r3, #1
 80007d6:	408b      	lsls	r3, r1
 80007d8:	43db      	mvns	r3, r3
 80007da:	4619      	mov	r1, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	400a      	ands	r2, r1
 80007e2:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; // Set
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	6859      	ldr	r1, [r3, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	430a      	orrs	r2, r1
 80007f2:	605a      	str	r2, [r3, #4]

	temp = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]

	//5. Configure the Alternate Functionality

	//If the Pin Mode is Alternate Functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	795b      	ldrb	r3, [r3, #5]
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	d131      	bne.n	8000864 <GPIO_Init+0x328>

		//Configure Alternate Functionality Register
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	791b      	ldrb	r3, [r3, #4]
 8000804:	08db      	lsrs	r3, r3, #3
 8000806:	727b      	strb	r3, [r7, #9]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	791b      	ldrb	r3, [r3, #4]
 800080c:	f003 0307 	and.w	r3, r3, #7
 8000810:	723b      	strb	r3, [r7, #8]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << (4 * temp2) ); //Clear
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	7a7a      	ldrb	r2, [r7, #9]
 8000818:	3208      	adds	r2, #8
 800081a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800081e:	7a3b      	ldrb	r3, [r7, #8]
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	220f      	movs	r2, #15
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	43db      	mvns	r3, r3
 800082a:	4618      	mov	r0, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	7a7a      	ldrb	r2, [r7, #9]
 8000832:	4001      	ands	r1, r0
 8000834:	3208      	adds	r2, #8
 8000836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2) ); //Set
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	7a7a      	ldrb	r2, [r7, #9]
 8000840:	3208      	adds	r2, #8
 8000842:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	7a5b      	ldrb	r3, [r3, #9]
 800084a:	461a      	mov	r2, r3
 800084c:	7a3b      	ldrb	r3, [r7, #8]
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	4618      	mov	r0, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	7a7a      	ldrb	r2, [r7, #9]
 800085c:	4301      	orrs	r1, r0
 800085e:	3208      	adds	r2, #8
 8000860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40013800 	.word	0x40013800
 8000870:	40013c00 	.word	0x40013c00

08000874 <GPIO_ReadFromInputPin>:
 * @Note			- none
 *
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	460b      	mov	r3, r1
 800087e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)( (pGPIOx->IDR >> PinNumber) & 0x00000001 );
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	691a      	ldr	r2, [r3, #16]
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	fa22 f303 	lsr.w	r3, r2, r3
 800088a:	b2db      	uxtb	r3, r3
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	73fb      	strb	r3, [r7, #15]
	return value;
 8000892:	7bfb      	ldrb	r3, [r7, #15]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <RCC_GetPLLOutputClock>:
 *
 * @Note			-
 *
 */

uint32_t RCC_GetPLLOutputClock(void){
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

	//Implement Latter
	return 0;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <RCC_GetPCLK1Value>:
 *
 * @Note			-
 *
 */

uint32_t RCC_GetPCLK1Value(void){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clkscr, temp, ahbp, apb1p;

	clkscr = ((RCC->CFGR >> 2) & 0x3);
 80008b6:	4b26      	ldr	r3, [pc, #152]	; (8000950 <RCC_GetPCLK1Value+0xa0>)
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	089b      	lsrs	r3, r3, #2
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	f003 0303 	and.w	r3, r3, #3
 80008c2:	727b      	strb	r3, [r7, #9]
	if (clkscr == 0){
 80008c4:	7a7b      	ldrb	r3, [r7, #9]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d102      	bne.n	80008d0 <RCC_GetPCLK1Value+0x20>
		SystemClk = HSI_Freq;
 80008ca:	4b22      	ldr	r3, [pc, #136]	; (8000954 <RCC_GetPCLK1Value+0xa4>)
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	e00b      	b.n	80008e8 <RCC_GetPCLK1Value+0x38>
	}
	else if (clkscr == 1){
 80008d0:	7a7b      	ldrb	r3, [r7, #9]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d102      	bne.n	80008dc <RCC_GetPCLK1Value+0x2c>
		SystemClk = HSE_Freq;
 80008d6:	4b20      	ldr	r3, [pc, #128]	; (8000958 <RCC_GetPCLK1Value+0xa8>)
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	e005      	b.n	80008e8 <RCC_GetPCLK1Value+0x38>
	}
	else if (clkscr == 2){
 80008dc:	7a7b      	ldrb	r3, [r7, #9]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d102      	bne.n	80008e8 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 80008e2:	f7ff ffdd 	bl	80008a0 <RCC_GetPLLOutputClock>
 80008e6:	60f8      	str	r0, [r7, #12]
	}

	// AHP PreScalar
	temp = ((RCC->CFGR >> 4) & 0xF);
 80008e8:	4b19      	ldr	r3, [pc, #100]	; (8000950 <RCC_GetPCLK1Value+0xa0>)
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	091b      	lsrs	r3, r3, #4
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	f003 030f 	and.w	r3, r3, #15
 80008f4:	723b      	strb	r3, [r7, #8]
	if(temp < 8){
 80008f6:	7a3b      	ldrb	r3, [r7, #8]
 80008f8:	2b07      	cmp	r3, #7
 80008fa:	d802      	bhi.n	8000902 <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 80008fc:	2301      	movs	r3, #1
 80008fe:	72fb      	strb	r3, [r7, #11]
 8000900:	e005      	b.n	800090e <RCC_GetPCLK1Value+0x5e>
	}
	else{
		ahbp = AHB_PreScalar[temp-8];
 8000902:	7a3b      	ldrb	r3, [r7, #8]
 8000904:	3b08      	subs	r3, #8
 8000906:	4a15      	ldr	r2, [pc, #84]	; (800095c <RCC_GetPCLK1Value+0xac>)
 8000908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800090c:	72fb      	strb	r3, [r7, #11]
	}

	//APB1 PreScalar
	temp = ((RCC->CFGR >> 10) & 0x7);
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <RCC_GetPCLK1Value+0xa0>)
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	0a9b      	lsrs	r3, r3, #10
 8000914:	b2db      	uxtb	r3, r3
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	723b      	strb	r3, [r7, #8]
	if(temp < 4){
 800091c:	7a3b      	ldrb	r3, [r7, #8]
 800091e:	2b03      	cmp	r3, #3
 8000920:	d802      	bhi.n	8000928 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 8000922:	2301      	movs	r3, #1
 8000924:	72bb      	strb	r3, [r7, #10]
 8000926:	e005      	b.n	8000934 <RCC_GetPCLK1Value+0x84>
	}
	else{
		apb1p = APB_PreScalar[temp-4];
 8000928:	7a3b      	ldrb	r3, [r7, #8]
 800092a:	3b04      	subs	r3, #4
 800092c:	4a0c      	ldr	r2, [pc, #48]	; (8000960 <RCC_GetPCLK1Value+0xb0>)
 800092e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000932:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = ( (SystemClk / ahbp) / apb1p );
 8000934:	7afb      	ldrb	r3, [r7, #11]
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	fbb2 f2f3 	udiv	r2, r2, r3
 800093c:	7abb      	ldrb	r3, [r7, #10]
 800093e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000942:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000944:	687b      	ldr	r3, [r7, #4]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	00f42400 	.word	0x00f42400
 8000958:	007a1200 	.word	0x007a1200
 800095c:	20000400 	.word	0x20000400
 8000960:	20000410 	.word	0x20000410

08000964 <RCC_GetPCLK2Value>:
 *
 * @Note			-
 *
 */

uint32_t RCC_GetPCLK2Value(void){
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0

	uint32_t pclk2, SystemClk;

	uint8_t clkscr, temp, ahbp, apb2p;

	clkscr = ((RCC->CFGR >> 2) & 0x3);
 800096a:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <RCC_GetPCLK2Value+0xa0>)
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	089b      	lsrs	r3, r3, #2
 8000970:	b2db      	uxtb	r3, r3
 8000972:	f003 0303 	and.w	r3, r3, #3
 8000976:	727b      	strb	r3, [r7, #9]

	if (clkscr == 0){
 8000978:	7a7b      	ldrb	r3, [r7, #9]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d102      	bne.n	8000984 <RCC_GetPCLK2Value+0x20>
		SystemClk = HSI_Freq;
 800097e:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <RCC_GetPCLK2Value+0xa4>)
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	e00b      	b.n	800099c <RCC_GetPCLK2Value+0x38>
	}
	else if (clkscr == 1){
 8000984:	7a7b      	ldrb	r3, [r7, #9]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d102      	bne.n	8000990 <RCC_GetPCLK2Value+0x2c>
		SystemClk = HSE_Freq;
 800098a:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <RCC_GetPCLK2Value+0xa8>)
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	e005      	b.n	800099c <RCC_GetPCLK2Value+0x38>
	}
	else if (clkscr == 2){
 8000990:	7a7b      	ldrb	r3, [r7, #9]
 8000992:	2b02      	cmp	r3, #2
 8000994:	d102      	bne.n	800099c <RCC_GetPCLK2Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8000996:	f7ff ff83 	bl	80008a0 <RCC_GetPLLOutputClock>
 800099a:	60f8      	str	r0, [r7, #12]
	}

	// AHP PreScalar
	temp = ((RCC->CFGR >> 4) & 0xF);
 800099c:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <RCC_GetPCLK2Value+0xa0>)
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	091b      	lsrs	r3, r3, #4
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	f003 030f 	and.w	r3, r3, #15
 80009a8:	723b      	strb	r3, [r7, #8]
	if(temp < 8){
 80009aa:	7a3b      	ldrb	r3, [r7, #8]
 80009ac:	2b07      	cmp	r3, #7
 80009ae:	d802      	bhi.n	80009b6 <RCC_GetPCLK2Value+0x52>
		ahbp = 1;
 80009b0:	2301      	movs	r3, #1
 80009b2:	72fb      	strb	r3, [r7, #11]
 80009b4:	e005      	b.n	80009c2 <RCC_GetPCLK2Value+0x5e>
	}
	else{
		ahbp = AHB_PreScalar[temp-8];
 80009b6:	7a3b      	ldrb	r3, [r7, #8]
 80009b8:	3b08      	subs	r3, #8
 80009ba:	4a15      	ldr	r2, [pc, #84]	; (8000a10 <RCC_GetPCLK2Value+0xac>)
 80009bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009c0:	72fb      	strb	r3, [r7, #11]
	}

	//APB2 PreScalar
	temp = ((RCC->CFGR >> 13) & 0x7);
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <RCC_GetPCLK2Value+0xa0>)
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	0b5b      	lsrs	r3, r3, #13
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	723b      	strb	r3, [r7, #8]
	if(temp < 4){
 80009d0:	7a3b      	ldrb	r3, [r7, #8]
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d802      	bhi.n	80009dc <RCC_GetPCLK2Value+0x78>
		apb2p = 1;
 80009d6:	2301      	movs	r3, #1
 80009d8:	72bb      	strb	r3, [r7, #10]
 80009da:	e005      	b.n	80009e8 <RCC_GetPCLK2Value+0x84>
	}
	else{
		apb2p = APB_PreScalar[temp-4];
 80009dc:	7a3b      	ldrb	r3, [r7, #8]
 80009de:	3b04      	subs	r3, #4
 80009e0:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <RCC_GetPCLK2Value+0xb0>)
 80009e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009e6:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = ( (SystemClk / ahbp) / apb2p );
 80009e8:	7afb      	ldrb	r3, [r7, #11]
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80009f0:	7abb      	ldrb	r3, [r7, #10]
 80009f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f6:	607b      	str	r3, [r7, #4]

	return pclk2;
 80009f8:	687b      	ldr	r3, [r7, #4]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	00f42400 	.word	0x00f42400
 8000a0c:	007a1200 	.word	0x007a1200
 8000a10:	20000400 	.word	0x20000400
 8000a14:	20000410 	.word	0x20000410

08000a18 <USART_PeriClockControl>:
 * @Note			- none
 *
 */


void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE){
 8000a24:	78fb      	ldrb	r3, [r7, #3]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d141      	bne.n	8000aae <USART_PeriClockControl+0x96>
		if (pUSARTx == USART1){
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a43      	ldr	r2, [pc, #268]	; (8000b3c <USART_PeriClockControl+0x124>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d106      	bne.n	8000a40 <USART_PeriClockControl+0x28>
			USART1_PCLK_EN();
 8000a32:	4b43      	ldr	r3, [pc, #268]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	4a42      	ldr	r2, [pc, #264]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000a38:	f043 0310 	orr.w	r3, r3, #16
 8000a3c:	6453      	str	r3, [r2, #68]	; 0x44
		}
		else if (pUSARTx == USART6){
			USART6_PCLK_DI();
		}
	}
}
 8000a3e:	e077      	b.n	8000b30 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART2){
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a40      	ldr	r2, [pc, #256]	; (8000b44 <USART_PeriClockControl+0x12c>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d106      	bne.n	8000a56 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000a48:	4b3d      	ldr	r3, [pc, #244]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	4a3c      	ldr	r2, [pc, #240]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a52:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a54:	e06c      	b.n	8000b30 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART3){
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a3b      	ldr	r2, [pc, #236]	; (8000b48 <USART_PeriClockControl+0x130>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d106      	bne.n	8000a6c <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000a5e:	4b38      	ldr	r3, [pc, #224]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a37      	ldr	r2, [pc, #220]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a6a:	e061      	b.n	8000b30 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4){
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a37      	ldr	r2, [pc, #220]	; (8000b4c <USART_PeriClockControl+0x134>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d106      	bne.n	8000a82 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000a74:	4b32      	ldr	r3, [pc, #200]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	4a31      	ldr	r2, [pc, #196]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000a7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a7e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a80:	e056      	b.n	8000b30 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART5){
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a32      	ldr	r2, [pc, #200]	; (8000b50 <USART_PeriClockControl+0x138>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d106      	bne.n	8000a98 <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 8000a8a:	4b2d      	ldr	r3, [pc, #180]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	4a2c      	ldr	r2, [pc, #176]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000a90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a96:	e04b      	b.n	8000b30 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART6){
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a2e      	ldr	r2, [pc, #184]	; (8000b54 <USART_PeriClockControl+0x13c>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d147      	bne.n	8000b30 <USART_PeriClockControl+0x118>
			USART6_PCLK_EN();
 8000aa0:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa4:	4a26      	ldr	r2, [pc, #152]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000aa6:	f043 0320 	orr.w	r3, r3, #32
 8000aaa:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000aac:	e040      	b.n	8000b30 <USART_PeriClockControl+0x118>
		if (pUSARTx == USART1){
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a22      	ldr	r2, [pc, #136]	; (8000b3c <USART_PeriClockControl+0x124>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d106      	bne.n	8000ac4 <USART_PeriClockControl+0xac>
			USART1_PCLK_DI();
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	4a21      	ldr	r2, [pc, #132]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000abc:	f023 0310 	bic.w	r3, r3, #16
 8000ac0:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000ac2:	e035      	b.n	8000b30 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART2){
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a1f      	ldr	r2, [pc, #124]	; (8000b44 <USART_PeriClockControl+0x12c>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d106      	bne.n	8000ada <USART_PeriClockControl+0xc2>
			USART2_PCLK_DI();
 8000acc:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	4a1b      	ldr	r2, [pc, #108]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000ad2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000ad6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ad8:	e02a      	b.n	8000b30 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART3){
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a1a      	ldr	r2, [pc, #104]	; (8000b48 <USART_PeriClockControl+0x130>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d106      	bne.n	8000af0 <USART_PeriClockControl+0xd8>
			USART3_PCLK_DI();
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000aee:	e01f      	b.n	8000b30 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4){
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <USART_PeriClockControl+0x134>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d106      	bne.n	8000b06 <USART_PeriClockControl+0xee>
			UART4_PCLK_DI();
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000afe:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000b02:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b04:	e014      	b.n	8000b30 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART5){
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a11      	ldr	r2, [pc, #68]	; (8000b50 <USART_PeriClockControl+0x138>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d106      	bne.n	8000b1c <USART_PeriClockControl+0x104>
			UART5_PCLK_DI();
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000b14:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b1a:	e009      	b.n	8000b30 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART6){
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <USART_PeriClockControl+0x13c>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d105      	bne.n	8000b30 <USART_PeriClockControl+0x118>
			USART6_PCLK_DI();
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b28:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <USART_PeriClockControl+0x128>)
 8000b2a:	f023 0320 	bic.w	r3, r3, #32
 8000b2e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	40011000 	.word	0x40011000
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40004400 	.word	0x40004400
 8000b48:	40004800 	.word	0x40004800
 8000b4c:	40004c00 	.word	0x40004c00
 8000b50:	40005000 	.word	0x40005000
 8000b54:	40011400 	.word	0x40011400

08000b58 <USART_SetBaudRate>:
 *
 * @Note              -  Learning outcome (Rounding and dealing with Fractional Calculation without using Floating numbers)

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part, F_part;

	uint32_t tempreg=0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
	//Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6){
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a31      	ldr	r2, [pc, #196]	; (8000c30 <USART_SetBaudRate+0xd8>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d003      	beq.n	8000b76 <USART_SetBaudRate+0x1e>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a30      	ldr	r2, [pc, #192]	; (8000c34 <USART_SetBaudRate+0xdc>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d103      	bne.n	8000b7e <USART_SetBaudRate+0x26>
		//USART1 and USART6 are hanging on APB2 bus
		PCLKx = RCC_GetPCLK2Value();
 8000b76:	f7ff fef5 	bl	8000964 <RCC_GetPCLK2Value>
 8000b7a:	61f8      	str	r0, [r7, #28]
 8000b7c:	e002      	b.n	8000b84 <USART_SetBaudRate+0x2c>
	}
	else{
		PCLKx = RCC_GetPCLK1Value();
 8000b7e:	f7ff fe97 	bl	80008b0 <RCC_GetPCLK1Value>
 8000b82:	61f8      	str	r0, [r7, #28]
	}

	//Check for OVER8 configuration bit
	if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8 ) ){
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d00b      	beq.n	8000ba8 <USART_SetBaudRate+0x50>
		//OVER8 = 1 , over sampling by 8 (USARTDIV = (100*FCLK)/(8*BaudRate)
		usartdiv = ((25 * PCLKx) / (2 * BaudRate));
 8000b90:	69fa      	ldr	r2, [r7, #28]
 8000b92:	4613      	mov	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	4413      	add	r3, r2
 8000b98:	009a      	lsls	r2, r3, #2
 8000b9a:	441a      	add	r2, r3
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba4:	61bb      	str	r3, [r7, #24]
 8000ba6:	e00a      	b.n	8000bbe <USART_SetBaudRate+0x66>
	}
	else{
		//over sampling by 16 (USARTDIV = (100*FCLK)/(16*BaudRate)
		usartdiv = ((25 * PCLKx) / (4 * BaudRate));
 8000ba8:	69fa      	ldr	r2, [r7, #28]
 8000baa:	4613      	mov	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	4413      	add	r3, r2
 8000bb0:	009a      	lsls	r2, r3, #2
 8000bb2:	441a      	add	r2, r3
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbc:	61bb      	str	r3, [r7, #24]
	}

	//Calculate the Mantissa part
	M_part = usartdiv/100;
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	4a1d      	ldr	r2, [pc, #116]	; (8000c38 <USART_SetBaudRate+0xe0>)
 8000bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc6:	095b      	lsrs	r3, r3, #5
 8000bc8:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	011b      	lsls	r3, r3, #4
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2264      	movs	r2, #100	; 0x64
 8000bd8:	fb02 f303 	mul.w	r3, r2, r3
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	617b      	str	r3, [r7, #20]

	//Calculate the final fractional
	if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8)){
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d00a      	beq.n	8000c04 <USART_SetBaudRate+0xac>
		//OVER8 = 1 , over sampling by 8 (Rounding Concept)
		F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	3332      	adds	r3, #50	; 0x32
 8000bf4:	4a10      	ldr	r2, [pc, #64]	; (8000c38 <USART_SetBaudRate+0xe0>)
 8000bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	f003 0307 	and.w	r3, r3, #7
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	e009      	b.n	8000c18 <USART_SetBaudRate+0xc0>
	}
	else{
		//over sampling by 16
		F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	011b      	lsls	r3, r3, #4
 8000c08:	3332      	adds	r3, #50	; 0x32
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <USART_SetBaudRate+0xe0>)
 8000c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c10:	095b      	lsrs	r3, r3, #5
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	617b      	str	r3, [r7, #20]
	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	609a      	str	r2, [r3, #8]
}
 8000c26:	bf00      	nop
 8000c28:	3720      	adds	r7, #32
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40011000 	.word	0x40011000
 8000c34:	40011400 	.word	0x40011400
 8000c38:	51eb851f 	.word	0x51eb851f

08000c3c <USART_Config>:
 *
 * @Note			- none
 *
 */

void USART_Config(USART_Handle_t *pUSARTHandle){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	// Enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fee2 	bl	8000a18 <USART_PeriClockControl>

	// Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_RX)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	791b      	ldrb	r3, [r3, #4]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d104      	bne.n	8000c66 <USART_Config+0x2a>
	{
		// Enable the Receiver bit field
		tempreg|= ( 1 << USART_CR1_RE );
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	e010      	b.n	8000c88 <USART_Config+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TX)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	791b      	ldrb	r3, [r3, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d104      	bne.n	8000c78 <USART_Config+0x3c>
	{
		// Enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f043 0308 	orr.w	r3, r3, #8
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	e007      	b.n	8000c88 <USART_Config+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	791b      	ldrb	r3, [r3, #4]
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d103      	bne.n	8000c88 <USART_Config+0x4c>
	{
		// Enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE ) | ( 1 << USART_CR1_TE ) );
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f043 030c 	orr.w	r3, r3, #12
 8000c86:	60fb      	str	r3, [r7, #12]
	}

    // Configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_wordLength << USART_CR1_M ;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	7b5b      	ldrb	r3, [r3, #13]
 8000c8c:	031b      	lsls	r3, r3, #12
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	7b9b      	ldrb	r3, [r3, #14]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d104      	bne.n	8000ca8 <USART_Config+0x6c>
	{
		//Enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE );
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	e00b      	b.n	8000cc0 <USART_Config+0x84>

		// Enable EVEN parity
		//tempreg &= ( 1 << USART_CR1_PS )
		// Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	7b9b      	ldrb	r3, [r3, #14]
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d107      	bne.n	8000cc0 <USART_Config+0x84>
	{
		// Enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb6:	60fb      	str	r3, [r7, #12]

	    // Enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS );
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbe:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]

	// Configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	7b1b      	ldrb	r3, [r3, #12]
 8000cd0:	031b      	lsls	r3, r3, #12
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	7bdb      	ldrb	r3, [r3, #15]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d104      	bne.n	8000cf8 <USART_Config+0xbc>
	{
		// Enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE );
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	e010      	b.n	8000d1a <USART_Config+0xde>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7bdb      	ldrb	r3, [r3, #15]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d104      	bne.n	8000d0a <USART_Config+0xce>
	{
		// Enable RTS flow control
		tempreg |= (1 << USART_CR3_RTSE );
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	e007      	b.n	8000d1a <USART_Config+0xde>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	7bdb      	ldrb	r3, [r3, #15]
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	d103      	bne.n	8000d1a <USART_Config+0xde>
	{
		// Enable both CTS and RTS Flow control
		tempreg |= ( ( 1 << USART_CR3_CTSE ) | ( 1<< USART_CR3_RTSE ) );
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000d18:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	615a      	str	r2, [r3, #20]


/******************************** Configuration of BRR(Baudrate register)******************************************/

	// Configure the baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	f7ff ff13 	bl	8000b58 <USART_SetBaudRate>

}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b086      	sub	sp, #24
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	60f8      	str	r0, [r7, #12]
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	e031      	b.n	8000db0 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus( pUSARTHandle->pUSARTx, USART_FLAG_TXE ) );
 8000d4c:	bf00      	nop
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2180      	movs	r1, #128	; 0x80
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 f859 	bl	8000e0c <USART_GetFlagStatus>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d0f6      	beq.n	8000d4e <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_wordLength == USART_WORDLEN_9BITS)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	7b5b      	ldrb	r3, [r3, #13]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d118      	bne.n	8000d9a <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d7a:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	7b9b      	ldrb	r3, [r3, #14]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d106      	bne.n	8000d92 <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	3301      	adds	r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	e00b      	b.n	8000daa <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	3301      	adds	r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	e007      	b.n	8000daa <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	781a      	ldrb	r2, [r3, #0]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	3301      	adds	r3, #1
 8000da8:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d3c9      	bcc.n	8000d4c <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus( pUSARTHandle->pUSARTx, USART_FLAG_TC ) );
 8000db8:	bf00      	nop
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2140      	movs	r1, #64	; 0x40
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 f823 	bl	8000e0c <USART_GetFlagStatus>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0f6      	beq.n	8000dba <USART_SendData+0x80>
}
 8000dcc:	bf00      	nop
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <USART_PeripheralControl>:
 *
 * @Note			- The USART Needs to Enabled before Sending/Receiving Data and To be Disabled Before Configuring
 *
 */

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE){
 8000de0:	78fb      	ldrb	r3, [r7, #3]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d106      	bne.n	8000df4 <USART_PeripheralControl+0x20>
		pUSARTx->CR1 |= ( 1 << USART_CR1_UE );
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	60da      	str	r2, [r3, #12]

	}else {
		pUSARTx->CR1 &= ~( 1 << USART_CR1_UE );
	}
}
 8000df2:	e005      	b.n	8000e00 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~( 1 << USART_CR1_UE );
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	60da      	str	r2, [r3, #12]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <USART_GetFlagStatus>:
 *
 * @Note			- none
 *
 */

uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint32_t FlagName){
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]

	if (pUSARTx->SR & FlagName){
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <USART_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e000      	b.n	8000e28 <USART_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <__libc_init_array>:
 8000e34:	b570      	push	{r4, r5, r6, lr}
 8000e36:	4e0d      	ldr	r6, [pc, #52]	; (8000e6c <__libc_init_array+0x38>)
 8000e38:	4c0d      	ldr	r4, [pc, #52]	; (8000e70 <__libc_init_array+0x3c>)
 8000e3a:	1ba4      	subs	r4, r4, r6
 8000e3c:	10a4      	asrs	r4, r4, #2
 8000e3e:	2500      	movs	r5, #0
 8000e40:	42a5      	cmp	r5, r4
 8000e42:	d109      	bne.n	8000e58 <__libc_init_array+0x24>
 8000e44:	4e0b      	ldr	r6, [pc, #44]	; (8000e74 <__libc_init_array+0x40>)
 8000e46:	4c0c      	ldr	r4, [pc, #48]	; (8000e78 <__libc_init_array+0x44>)
 8000e48:	f000 f818 	bl	8000e7c <_init>
 8000e4c:	1ba4      	subs	r4, r4, r6
 8000e4e:	10a4      	asrs	r4, r4, #2
 8000e50:	2500      	movs	r5, #0
 8000e52:	42a5      	cmp	r5, r4
 8000e54:	d105      	bne.n	8000e62 <__libc_init_array+0x2e>
 8000e56:	bd70      	pop	{r4, r5, r6, pc}
 8000e58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e5c:	4798      	blx	r3
 8000e5e:	3501      	adds	r5, #1
 8000e60:	e7ee      	b.n	8000e40 <__libc_init_array+0xc>
 8000e62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e66:	4798      	blx	r3
 8000e68:	3501      	adds	r5, #1
 8000e6a:	e7f2      	b.n	8000e52 <__libc_init_array+0x1e>
 8000e6c:	08000e94 	.word	0x08000e94
 8000e70:	08000e94 	.word	0x08000e94
 8000e74:	08000e94 	.word	0x08000e94
 8000e78:	08000e98 	.word	0x08000e98

08000e7c <_init>:
 8000e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e7e:	bf00      	nop
 8000e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e82:	bc08      	pop	{r3}
 8000e84:	469e      	mov	lr, r3
 8000e86:	4770      	bx	lr

08000e88 <_fini>:
 8000e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e8a:	bf00      	nop
 8000e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e8e:	bc08      	pop	{r3}
 8000e90:	469e      	mov	lr, r3
 8000e92:	4770      	bx	lr
